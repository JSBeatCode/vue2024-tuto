<!-- not script but setup return version -->
<!-- <script>
import { ref } from 'vue';

  export default {
    setup () {
      // not reactive data
      // const name = 'John Doe';
      // const status = 'active';
      // const tasks = ['Task1','Task2','Task3']

      // reactive data
      const name = ref('John Doe');
      const status = ref('active');
      const tasks = ref(['Task1','Task2','Task3'])

      const toggleStatus = () => {
        if (status.value === 'active') {
          status.value = 'pending'
        } else if (status.value === 'pending') {
          status.value = 'inactive'
        } else {
          status.value = 'active'
        }
      }
      return {
        name,
        status,
        tasks,
        toggleStatus
      }
    }
  }
</script> -->

<!-- script setup version -->
<script setup>
import { ref, onMounted } from 'vue';

// not reactive data
// const name = 'John Doe';
// const status = 'active';
// const tasks = ['Task1','Task2','Task3']
// const link = 'https://google.com'

// reactive data
const name = ref('John Doe');
const status = ref('active');
const tasks = ref(['Task1', 'Task2', 'Task3'])
const link = ref('https://google.com')
const newTask = ref('')

const toggleStatus = () => {
  if (status.value === 'active') {
    status.value = 'pending'
  } else if (status.value === 'pending') {
    status.value = 'inactive'
  } else {
    status.value = 'active'
  }
}

const addTask = () => {
  if (newTask.value.trim() !== '') {
    tasks.value.push(newTask.value)
    newTask.value = ''
  }
}

const deleteTask = (index) => {
  tasks.value.splice(index, 1);
}

// lifecycle
// onBeforeMount - Called before mounting begins.
// onMounted - Called when the component is mounted (i.e., inserted into the DOM).
// onBeforeUpdate - Called when reactive data changes but before the component re-renders.
// onUpdated - Called after the component has re-rendered due to data changes.
// onBeforeUnmount - Called right before the component is destroyed.
// onUnmounted - Called after the component has been destroyed.
// onActivated - Called when a keep-alive component is activated.
// onDeactivated - Called when a keep-alive component is deactivated.
// onErrorCaptured - Called when an error is caught from a child component.

onMounted(async () => {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/todos')
    const data = await response.json();
    tasks.value = data.map((task) => task.title)
  } catch (error) {
    console.log('Error Fetching Tasks')
  }
})

</script>

<template>
  <h1>{{ name }}</h1>
  <p v-if="status === 'active'">User is Active</p>
  <p v-else-if="status ==='pending'">User is Pending</p>
  <p v-else>User is InActive</p>

  <!-- @submit.prevent is preventing any script working before submit. -->
  <form @submit.prevent="addTask">
    <label for="newTask">Add Task</label>
    <!-- this input linked with 'newTask' ref in the screen by tagging 'v-model' -->
    <input type="text" id="newTask" name="newTask" v-model="newTask">
    <button type="submit">Submit</button>
  </form>

  <h3>Tasks</h3>
  <ul>
    <li v-for="(task, index) in tasks" :key="index">
      <span>{{ task }}</span>
      <button @click="deleteTask(index)">X</button>
    </li>
  </ul>
  <a :href="link">Click for Google</a>
  <br>
  <!-- <button v-on:click="toggleStatus">Change Status</button> -->
  <button @click="toggleStatus">Change Status</button>

</template>
